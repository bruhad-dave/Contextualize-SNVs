## this new module in get_span corrects for strand information (reverse-complements any flanking spans found with strand=0). 
## takes as input the .span_data_file generated by get_span_v2.py
import argparse
import pandas as pd

parser = argparse.ArgumentParser()
parser.add_argument("-i", "--infile", help="Input file containing coordinates and span sequence.") ## generated using samtools and the .span_file.txt generated by get_span_v2.py
parser.add_argument("-d", "--data", help="The .span_data_file generated by get_span_v2.py")
parser.add_argument("-n", "--name", help="The name to assign to the output.")
args = parser.parse_args()

spanSeq_file = args.infile
data_file = args.data
name=args.name
revComp = {"A":"T", "T":"A", "G":"C", "C":"G"}

def reverse_complement_seq(seq, strand):
    if strand == 0:
        return "".join(revComp[i] for i in seq)
    else:
        return seq

data_ = pd.read_csv(data_file, sep = "\t", header = 0)
span_ = pd.read_csv(spanSeq_file, sep = "\t", header = None)
span_.columns = ["SpanCoord", "SpanSeq"]

merged = pd.merge(data_, span_, left_on="Span_Coordinates", right_on="SpanCoord")
merged["SpansStrandCorr"] = merged.apply(lambda row: reverse_complement_seq(row["SpanSeq"], row["Strand"]), axis = 1)
spans_corrected = merged[["Span_Coordinates", "SpansStrandCorr"]]
spans_corrected.to_csv("./"+name+".spans_strCorr.txt", sep = "\t", header=True, index = False)
merged.to_csv("./"+name+".strCorrData.txt", sep = "\t", header = True, index = False)
